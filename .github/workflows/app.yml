name: cloud backup api demo CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-then-test:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        node-version: [16.x]
    steps:
    - uses: actions/checkout@v2
    - name: Run build-node-app-then-test ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    - uses: Daniel-Marynicz/postgresql-action@1.0.0
      with:
        # Docker postgres image tag for available image tags please see https://hub.docker.com/_/postgres
        postgres_image_tag: 12 # optional, default is latest
        # Docker postgres image name if not using https://hub.docker.com/_/postgres
        postgres_image_name: postgres # optional, default is postgres
        # POSTGRES_USER - create the user with the superuser power
        postgres_user: assessment # optional, default is postgres
        # POSTGRES_DB - postgres database
        postgres_db: cloud-backup-api-test # optional, default is postgres
        # POSTGRES_PASSWORD - superuser password
        postgres_password: lovely # optional
        # POSTGRES_EXTENSIONS - List of postgres extensions separated by space to install in template1 database
        postgres_extensions: # optional
        # APP_USER - unprivileged postgres user
        app_user: # optional, default is app
        # APP_PASSWORD_USER - password for unprivileged postgres user
        app_user_password: # optional, default is app
        # APP_DB - database or list of databases separated by space for unprivileged postgres user
        app_db: # optional, default is app
        # EXPOSED_POSTGRES_PORT - exposed postgres port
    - run: npm ci
    - run: sudo service postgresql start
    - run: sudo service postgresql status
    - run: npm run coverage:codacy-in-ci
      env:
        TEST_DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
        CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
        CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
        FLUTTERWAVE_SECRET_KEY_TESTING: ${{ secrets.FLUTTERWAVE_SECRET_KEY_TESTING }}

    - uses: codacy/codacy-coverage-reporter-action@v1.3.0
      with:
        project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
        coverage-reports: coverage/lcov.info

    - uses: coverallsapp/github-action@1.1.3
      with:
        # 
        github-token: ${{ secrets.GITHUB_TOKEN }}
        # Path to lcov file
        path-to-lcov: ./coverage/lcov.info # default is ./coverage/lcov.info
        # Job flag name, e.g. "Unit", "Functional", or "Integration". Will be shown in the Coveralls UI.
        flag-name: # optional
        # Set to true if you are running parallel jobs, then use "parallel_finished: true" for the last action.
        parallel: # optional
        # Set to true for the last action when using "parallel: true".
        parallel-finished: # optional
        # Coveralls Enterprise server (more info: https://enterprise.coveralls.io)
        coveralls-endpoint: # optional, default is https://coveralls.io
        # The root folder of the project that originally ran the tests
    #     base-path: # optional

    - uses: codecov/codecov-action@v2.1.0
      with:
        # Repository upload token - get it from codecov.io. Required only for private repositories
        token: # optional
        # Comma-separated list of files to upload
        files: # optional
        # Directory to search for coverage reports.
        directory: ./coverage # optional
        # Flag upload to group coverage metrics (e.g. unittests | integration | ui,chrome)
        flags: # optional
        # Extra curl arguments to communicate with AWS.
        aws_curl_args: # optional
        # Extra curl arguments to communicate with Codecov. e.g., -U "--proxy http://http-proxy"
        codecov_curl_args: # optional
        # The commit SHA of the parent for which you are uploading coverage. If not present, the parent will be determined using the API of your repository provider.  When using the repository providers API, the parent is determined via finding the closest ancestor to the commit.
        commit_parent: # optional
        # Environment variables to tag the upload with (e.g. PYTHON | OS,PYTHON)
        env_vars: # optional
        # Specify whether or not CI build should fail if Codecov runs into an error during upload
        fail_ci_if_error: # optional
        # Path to coverage file to upload
        file: # optional
        # Comma-separated list, see the README for options and their usage
        functionalities: # optional
        # extra arguments to pass to gcov
        gcov_args: # optional
        # gcov executable to run. Defaults to gcov
        gcov_executable: # optional
        # Paths to ignore during gcov gathering (as a glob)
        gcov_path_exclude: # optional
        # Paths to include during gcov gathering (as a glob)
        gcov_path_include: # optional
        # Prefix filepaths to help resolve path fixing
        gcov_prefix: # optional
        # Project root directory, also used when preparing gcov
        gcov_root_dir: # optional
        # Move discovered coverage reports to the trash
        move_coverage_to_trash: # optional
        # User defined upload name. Visible in Codecov UI
        name: # optional
        # Used to restrict the set of git/hg files that can be matched with filenames in the coverage report. This is useful for monorepos or other setups where a full filepath may not be specified in the coverage report, and that shortened filepath may appear multiple times in a directory structure (e.g. __init__.py)
        network_filter: # optional
        # Specify the branch name
        override_branch: # optional
        # Specify the build number
        override_build: # optional
        # Specify the commit SHA
        override_commit: # optional
        # Specify the pull request number
        override_pr: # optional
        # Specify the git tag
        override_tag: # optional
        # Write upload file to path before uploading
        path_to_write_report: # optional
        # Used when not in git/hg project to identify project root directory
        root_dir: # optional
        # Specify whether the Codecov output should be verbose
        verbose: # optional
        # Directory in which to execute codecov.sh
        working-directory: # optional
        # Custom Derived Data Path for Coverage.profdata and gcov processing
        xcode_derived_data: # optional
        # Specify packages to build coverage. Uploader will only build these packages
        xcode_package: # optional